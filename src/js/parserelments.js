/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser2 = (function(){
var parser = {trace: function trace(){},
yy: {},
symbols_: {"error":2,"raiz":3,"Expreiones_Aritmeticas":4,"EOF":5,"Create":6,"(":7,"ID":8,")":9,"+":10,"-":11,"*":12,"/":13,"%":14,"^":15,"valor":16,"Cadena":17,"NUMBER":18,"True":19,"False":20,"null":21,"Arreglo":22,"[":23,"]":24,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",6:"Create",7:"(",8:"ID",9:")",10:"+",11:"-",12:"*",13:"/",14:"%",15:"^",17:"Cadena",18:"NUMBER",19:"True",20:"False",21:"null",23:"[",24:"]"},
productions_: [0,[3,2],[3,5],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,2],[4,3],[4,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[22,4],[22,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */
/*``*/) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
        return $$[$0-1];
     
break;
case 2:
        return $$[$0-2];
     
break;
case 3:
    ts.consola=Consola
    ts.SistemaTipos($$[$0-2],$$[$0],$$[$0-1]);
    this.$=ts.temp
    this.$.fila=yylineno
    this.$.columna=yyleng
    
break;
case 4: 
    ts.consola=Consola
    ts.SistemaTipos($$[$0-2],$$[$0],$$[$0-1]);
    this.$=ts.temp
    this.$.fila=yylineno
    this.$.columna=yyleng
    
break;
case 5: 
    ts.consola=Consola
    ts.SistemaTipos($$[$0-2],$$[$0],$$[$0-1]);
    this.$=ts.temp;
    this.$.fila=yylineno
    this.$.columna=yyleng
break;
case 6:  
     ts.consola=Consola
    ts.SistemaTipos($$[$0-2],$$[$0],$$[$0-1]);
    this.$=ts.temp
    this.$.fila=yylineno
    this.$.columna=yyleng
break;
case 7:  
    ts.consola=Consola
    ts.SistemaTipos($$[$0-2],$$[$0],$$[$0-1]);
    this.$=ts.temp
    this.$.fila=yylineno
    this.$.columna=yyleng
    
break;
case 8: 
    ts.consola=Consola
    ts.SistemaTipos($$[$0-2],$$[$0],$$[$0-1]);
    this.$=ts.temp
    this.$.fila=yylineno
    this.$.columna=yyleng
break;
case 9: 
    ts.consola=Consola
    var cero=new Variable(0,'num');
    cero.valor=0;
    ts.SistemaTipos(cero,$$[$0],$$[$0-1]);
    this.$=ts.temp
    this.$.fila=yylineno
    this.$.columna=yyleng
break;
case 10:
        this.$=$$[$0-1];
    
break;
case 11:this.$=$$[$0]
break;
case 12:
    this.$=ts.ProcesarCadena(yytext);
    this.$.fila=yylineno
    this.$.columna=yyleng
    
break;
case 13:this.$=new Variable(yytext,'num');
    this.$.valor=$$[$0]
    this.$.fila=yylineno
    this.$.columna=yyleng
    
break;
case 14:
        var vars=ts.Variable_Busqueda($$[$0],yylineno,yyleng)
        if(vars!=null)
        {
            var temp=ts.getTemp()
            if(vars.get_Ambito()!='global')
            {
                var temp2=ts.getTemp()
                ts.imprimir(temp+' = P + '+vars.posicion+';')
                ts.imprimir(temp2+' = Stack['+temp+'];');
                vars.valor=temp2
            }
            else{
                ts.imprimir(temp+' = Heap['+vars.posicion+'];');
                vars.valor=temp
            }
        }
        else {
            vars=new Variable('','num')
            vars.valor=0;
        }
        this.$=vars;
    
break;
case 15:this.$=new Variable(0,'bool');
    this.$.valor=1
    this.$.fila=yylineno
    this.$.columna=yyleng
    
break;
case 16:this.$=new Variable(0,'bool');
    this.$.valor=0
    this.$.fila=yylineno
    this.$.columna=yyleng
    
break;
case 17:this.$=new Variable('','null'); this.$.valor=201403799;
break;
case 18:
        var vars=$$[$0]
        var vars2=new Variable('',vars.getTipoReal())
        if(vars!=null)
        {
            var temp=ts.getTemp()
            if(vars.get_Ambito()!='global')
            {
                var temp2=ts.getTemp()
                var temp3=ts.getTemp()
                ts.imprimir(temp+' = P + '+vars.posicion+';')
                ts.imprimir(temp3+' = '+temp+' + '+vars.valor+'; //Posicion Realtiva + Valor Mapeo')
                ts.imprimir(temp2+' = Stack['+temp3+'];');
                vars2.valor=temp2
            }
            else{
                var temp2=ts.getTemp()
                ts.imprimir(temp2+' = '+vars.posicion+' + '+vars.valor+';//Posicion Realtiva + Valor Mapeo')
                ts.imprimir(temp+' = Heap['+vars.posicion+'];');
                vars2.valor=temp2
            }
        }
        else {
            vars=new Variable('','num')
            vars.valor=0;
        }
        this.$=vars;
    
break;
case 19:
    this.$=$$[$0-3]
    if(this.$!=null)
    {
       if(this.$.linea+1<this.$.dimensiones.length)
       {
        var temp2=ts.getTemp()
        ts.imprimir(temp2+' = '+$$[$0-1].valor+' - '+this.$.dimensiones[this.$.linea+1].limite_i+';')
        var temp=ts.getTemp()
        ts.imprimir(temp+' = '+temp2+' * '+this.$.posicionarr(this.$.linea+1)+';')
        this.$.linea=this.$.linea+1
        var temp2=ts.getTemp()
        ts.imprimir(temp2+' = '+this.$.valor+' + '+temp+';')
        this.$.valor=temp2
        }
        else{
            this.$=null
        }
    }
    
break;
case 20:
      var vars=ts.Variable_Busqueda($$[$0-3],yylineno,yyleng)
        if(vars!=null)
        {
            if(vars.tipo.includes('Arreglo'))
            {
                var temp=ts.getTemp()
                ts.imprimir(temp+' = '+$$[$0-1].valor+' - '+vars.dimensiones[0].limite_i+';')
                this.$=vars
                this.$.valor=temp
                this.$.linea=0
            }
            else {
                this.$=null
                ts.AgregarError(yylineno,yyleng,'Se quiso acceder a la posicion de un arreglo pero la Variable no es un Arreglo','SemÃ¡ntico')
            }
        }
    
break;
}
},
table: [{3:1,4:2,6:[1,3],7:[1,5],8:[1,9],11:[1,4],16:6,17:[1,7],18:[1,8],19:[1,10],20:[1,11],21:[1,12],22:13},{1:[3]},{5:[1,14],10:[1,15],11:[1,16],12:[1,17],13:[1,18],14:[1,19],15:[1,20]},{7:[1,21]},{4:22,7:[1,5],8:[1,9],11:[1,4],16:6,17:[1,7],18:[1,8],19:[1,10],20:[1,11],21:[1,12],22:13},{4:23,7:[1,5],8:[1,9],11:[1,4],16:6,17:[1,7],18:[1,8],19:[1,10],20:[1,11],21:[1,12],22:13},{5:[2,11],9:[2,11],10:[2,11],11:[2,11],12:[2,11],13:[2,11],14:[2,11],15:[2,11],24:[2,11]},{5:[2,12],9:[2,12],10:[2,12],11:[2,12],12:[2,12],13:[2,12],14:[2,12],15:[2,12],24:[2,12]},{5:[2,13],9:[2,13],10:[2,13],11:[2,13],12:[2,13],13:[2,13],14:[2,13],15:[2,13],24:[2,13]},{5:[2,14],9:[2,14],10:[2,14],11:[2,14],12:[2,14],13:[2,14],14:[2,14],15:[2,14],23:[1,24],24:[2,14]},{5:[2,15],9:[2,15],10:[2,15],11:[2,15],12:[2,15],13:[2,15],14:[2,15],15:[2,15],24:[2,15]},{5:[2,16],9:[2,16],10:[2,16],11:[2,16],12:[2,16],13:[2,16],14:[2,16],15:[2,16],24:[2,16]},{5:[2,17],9:[2,17],10:[2,17],11:[2,17],12:[2,17],13:[2,17],14:[2,17],15:[2,17],24:[2,17]},{5:[2,18],9:[2,18],10:[2,18],11:[2,18],12:[2,18],13:[2,18],14:[2,18],15:[2,18],23:[1,25],24:[2,18]},{1:[2,1]},{4:26,7:[1,5],8:[1,9],11:[1,4],16:6,17:[1,7],18:[1,8],19:[1,10],20:[1,11],21:[1,12],22:13},{4:27,7:[1,5],8:[1,9],11:[1,4],16:6,17:[1,7],18:[1,8],19:[1,10],20:[1,11],21:[1,12],22:13},{4:28,7:[1,5],8:[1,9],11:[1,4],16:6,17:[1,7],18:[1,8],19:[1,10],20:[1,11],21:[1,12],22:13},{4:29,7:[1,5],8:[1,9],11:[1,4],16:6,17:[1,7],18:[1,8],19:[1,10],20:[1,11],21:[1,12],22:13},{4:30,7:[1,5],8:[1,9],11:[1,4],16:6,17:[1,7],18:[1,8],19:[1,10],20:[1,11],21:[1,12],22:13},{4:31,7:[1,5],8:[1,9],11:[1,4],16:6,17:[1,7],18:[1,8],19:[1,10],20:[1,11],21:[1,12],22:13},{8:[1,32]},{5:[2,9],9:[2,9],10:[2,9],11:[2,9],12:[2,9],13:[2,9],14:[2,9],15:[2,9],24:[2,9]},{9:[1,33],10:[1,15],11:[1,16],12:[1,17],13:[1,18],14:[1,19],15:[1,20]},{4:34,7:[1,5],8:[1,9],11:[1,4],16:6,17:[1,7],18:[1,8],19:[1,10],20:[1,11],21:[1,12],22:13},{4:35,7:[1,5],8:[1,9],11:[1,4],16:6,17:[1,7],18:[1,8],19:[1,10],20:[1,11],21:[1,12],22:13},{5:[2,3],9:[2,3],10:[2,3],11:[2,3],12:[1,17],13:[1,18],14:[1,19],15:[1,20],24:[2,3]},{5:[2,4],9:[2,4],10:[2,4],11:[2,4],12:[1,17],13:[1,18],14:[1,19],15:[1,20],24:[2,4]},{5:[2,5],9:[2,5],10:[2,5],11:[2,5],12:[2,5],13:[2,5],14:[1,19],15:[1,20],24:[2,5]},{5:[2,6],9:[2,6],10:[2,6],11:[2,6],12:[2,6],13:[2,6],14:[1,19],15:[1,20],24:[2,6]},{5:[2,7],9:[2,7],10:[2,7],11:[2,7],12:[2,7],13:[2,7],14:[1,19],15:[2,7],24:[2,7]},{5:[2,8],9:[2,8],10:[2,8],11:[2,8],12:[2,8],13:[2,8],14:[1,19],15:[2,8],24:[2,8]},{9:[1,36]},{5:[2,10],9:[2,10],10:[2,10],11:[2,10],12:[2,10],13:[2,10],14:[2,10],15:[2,10],24:[2,10]},{10:[1,15],11:[1,16],12:[1,17],13:[1,18],14:[1,19],15:[1,20],24:[1,37]},{10:[1,15],11:[1,16],12:[1,17],13:[1,18],14:[1,19],15:[1,20],24:[1,38]},{5:[1,39]},{5:[2,20],9:[2,20],10:[2,20],11:[2,20],12:[2,20],13:[2,20],14:[2,20],15:[2,20],23:[2,20],24:[2,20]},{5:[2,19],9:[2,19],10:[2,19],11:[2,19],12:[2,19],13:[2,19],14:[2,19],15:[2,19],23:[2,19],24:[2,19]},{1:[2,2]}],
defaultActions: {14:[2,1],39:[2,2]},
parseError: function parseError(str,hash){if(hash.recoverable){this.trace(str)}else{throw new Error(str)}},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str,hash){if(this.yy.parser){this.yy.parser.parseError(str,hash)}else{throw new Error(str)}},

// resets the lexer, sets new input
setInput:function (input){this._input=input;this._more=this._backtrack=this.done=false;this.yylineno=this.yyleng=0;this.yytext=this.matched=this.match="";this.conditionStack=["INITIAL"];this.yylloc={first_line:1,first_column:0,last_line:1,last_column:0};if(this.options.ranges){this.yylloc.range=[0,0]}this.offset=0;return this},

// consumes and returns one char from the input
input:function (){var ch=this._input[0];this.yytext+=ch;this.yyleng++;this.offset++;this.match+=ch;this.matched+=ch;var lines=ch.match(/(?:\r\n?|\n).*/g);if(lines){this.yylineno++;this.yylloc.last_line++}else{this.yylloc.last_column++}if(this.options.ranges){this.yylloc.range[1]++}this._input=this._input.slice(1);return ch},

// unshifts one char (or a string) into the input
unput:function (ch){var len=ch.length;var lines=ch.split(/(?:\r\n?|\n)/g);this._input=ch+this._input;this.yytext=this.yytext.substr(0,this.yytext.length-len-1);this.offset-=len;var oldLines=this.match.split(/(?:\r\n?|\n)/g);this.match=this.match.substr(0,this.match.length-1);this.matched=this.matched.substr(0,this.matched.length-1);if(lines.length-1){this.yylineno-=lines.length-1}var r=this.yylloc.range;this.yylloc={first_line:this.yylloc.first_line,last_line:this.yylineno+1,first_column:this.yylloc.first_column,last_column:lines?(lines.length===oldLines.length?this.yylloc.first_column:0)+oldLines[oldLines.length-lines.length].length-lines[0].length:this.yylloc.first_column-len};if(this.options.ranges){this.yylloc.range=[r[0],r[0]+this.yyleng-len]}this.yyleng=this.yytext.length;return this},

// When called from action, caches matched text and appends it on next action
more:function (){this._more=true;return this},

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function (){if(this.options.backtrack_lexer){this._backtrack=true}else{return this.parseError("Lexical error on line "+(this.yylineno+1)+". You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n"+this.showPosition(),{text:"",token:null,line:this.yylineno})}return this},

// retain first n characters of the match
less:function (n){this.unput(this.match.slice(n))},

// displays already matched input, i.e. for error messages
pastInput:function (){var past=this.matched.substr(0,this.matched.length-this.match.length);return(past.length>20?"...":"")+past.substr(-20).replace(/\n/g,"")},

// displays upcoming input, i.e. for error messages
upcomingInput:function (){var next=this.match;if(next.length<20){next+=this._input.substr(0,20-next.length)}return(next.substr(0,20)+(next.length>20?"...":"")).replace(/\n/g,"")},

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function (){var pre=this.pastInput();var c=new Array(pre.length+1).join("-");return pre+this.upcomingInput()+"\n"+c+"^"},

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match,indexed_rule){var token,lines,backup;if(this.options.backtrack_lexer){backup={yylineno:this.yylineno,yylloc:{first_line:this.yylloc.first_line,last_line:this.last_line,first_column:this.yylloc.first_column,last_column:this.yylloc.last_column},yytext:this.yytext,match:this.match,matches:this.matches,matched:this.matched,yyleng:this.yyleng,offset:this.offset,_more:this._more,_input:this._input,yy:this.yy,conditionStack:this.conditionStack.slice(0),done:this.done};if(this.options.ranges){backup.yylloc.range=this.yylloc.range.slice(0)}}lines=match[0].match(/(?:\r\n?|\n).*/g);if(lines){this.yylineno+=lines.length}this.yylloc={first_line:this.yylloc.last_line,last_line:this.yylineno+1,first_column:this.yylloc.last_column,last_column:lines?lines[lines.length-1].length-lines[lines.length-1].match(/\r?\n?/)[0].length:this.yylloc.last_column+match[0].length};this.yytext+=match[0];this.match+=match[0];this.matches=match;this.yyleng=this.yytext.length;if(this.options.ranges){this.yylloc.range=[this.offset,this.offset+=this.yyleng]}this._more=false;this._backtrack=false;this._input=this._input.slice(match[0].length);this.matched+=match[0];token=this.performAction.call(this,this.yy,this,indexed_rule,this.conditionStack[this.conditionStack.length-1]);if(this.done&&this._input){this.done=false}if(token){return token}else if(this._backtrack){for(var k in backup){this[k]=backup[k]}return false}return false},

// return next match in input
next:function (){if(this.done){return this.EOF}if(!this._input){this.done=true}var token,match,tempMatch,index;if(!this._more){this.yytext="";this.match=""}var rules=this._currentRules();for(var i=0;i<rules.length;i++){tempMatch=this._input.match(this.rules[rules[i]]);if(tempMatch&&(!match||tempMatch[0].length>match[0].length)){match=tempMatch;index=i;if(this.options.backtrack_lexer){token=this.test_match(tempMatch,rules[i]);if(token!==false){return token}else if(this._backtrack){match=false;continue}else{return false}}else if(!this.options.flex){break}}}if(match){token=this.test_match(match,rules[index]);if(token!==false){return token}return false}if(this._input===""){return this.EOF}else{return this.parseError("Lexical error on line "+(this.yylineno+1)+". Unrecognized text.\n"+this.showPosition(),{text:"",token:null,line:this.yylineno})}},

// return next match that has a token
lex:function lex(){var r=this.next();if(r){return r}else{return this.lex()}},

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition){this.conditionStack.push(condition)},

// pop the previously active lexer condition state off the condition stack
popState:function popState(){var n=this.conditionStack.length-1;if(n>0){return this.conditionStack.pop()}else{return this.conditionStack[0]}},

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules(){if(this.conditionStack.length&&this.conditionStack[this.conditionStack.length-1]){return this.conditions[this.conditionStack[this.conditionStack.length-1]].rules}else{return this.conditions["INITIAL"].rules}},

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n){n=this.conditionStack.length-1-Math.abs(n||0);if(n>=0){return this.conditionStack[n]}else{return"INITIAL"}},

// alias for begin(condition)
pushState:function pushState(condition){this.begin(condition)},

// return the number of states currently on the stack
stateStackSize:function stateStackSize(){return this.conditionStack.length},
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START
/*``*/) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 'Principal';
break;
case 2:return 'Array';
break;
case 3:return 'of';
break;
case 4:return 19;
break;
case 5:return 20;
break;
case 6:return 'Element';
break;
case 7:return 'Bool';
break;
case 8:return 'Str';
break;
case 9:return 21;
break;
case 10:return 6;
break;
case 11:return 'Num';
break;
case 12:return 'void';
break;
case 13:return 'If';
break;
case 14:return 'Then';
break;
case 15:return 'Else';
break;
case 16:return 'Switch';
break;
case 17:return 'Case';
break;
case 18:return 'Default';
break;
case 19:return 'Break';
break;
case 20:return 'Continue';
break;
case 21:return 'return';
break;
case 22:return 'while';
break;
case 23:return 'Do';
break;
case 24:return 'Repeat';
break;
case 25:return 'Until';
break;
case 26:return 'For';
break;
case 27:return 'Loop';
break;
case 28:return 'whilex';
break;
case 29:return 'Count';
break;
case 30:return 'getBool';
break;
case 31:return 'getNum';
break;
case 32:return 'outStr';
break;
case 33:return 'outNum';
break;
case 34:return 'inStr';
break;
case 35:return 'inNum';
break;
case 36:return 'Show';
break;
case 37:return 'getRandom';
break;
case 38:return 'getLength';
break;
case 39:return 'throws';
break;
case 40:return 'NullPointerException';
break;
case 41:return 'MissingReturnStatement';
break;
case 42:return 'ArithmeticException';
break;
case 43:return 'StackOverFlowException';
break;
case 44:return 'HeapOverFlowException';
break;
case 45:return 'PoolOverFlowException';
break;
case 46:return 12;
break;
case 47:return '..';
break;
case 48:return 13;
break;
case 49:return '=';
break;
case 50:return 11;
break;
case 51:return 10;
break;
case 52:return 15;
break;
case 53:return 14;
break;
case 54:return '<';
break;
case 55:return '>';
break;
case 56:return '<=';
break;
case 57:return '>=';
break;
case 58:return '==';
break;
case 59:return '!=';
break;
case 60:return '!';
break;
case 61:return '&&';
break;
case 62:return '||';
break;
case 63:return '|&';
break;
case 64:return '&?';
break;
case 65:return '|?';
break;
case 66:return '.';
break;
case 67:return ',';
break;
case 68:return ':';
break;
case 69:return ';';
break;
case 70:return 7;
break;
case 71:return 9;
break;
case 72:return 23;
break;
case 73:return 24;
break;
case 74:return '{';
break;
case 75:return '}';
break;
case 76:return 'PI';
break;
case 77:return 'E';
break;
case 78:return 8;
break;
case 79:return 18;
break;
case 80:return 17;
break;
case 81:return 'CHAR';
break;
case 82:return 5;
break;
}
},
rules: [/^(?:(\s+|\n+|\t+|\r+))/i,/^(?:Principal\b)/i,/^(?:array\b)/i,/^(?:of\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:element\b)/i,/^(?:bool\b)/i,/^(?:str\b)/i,/^(?:NULL\b)/i,/^(?:create\b)/i,/^(?:num\b)/i,/^(?:void\b)/i,/^(?:if\b)/i,/^(?:then\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:eepeat\b)/i,/^(?:until\b)/i,/^(?:for\b)/i,/^(?:loop\b)/i,/^(?:whilex\b)/i,/^(?:count\b)/i,/^(?:getBool\b)/i,/^(?:getNum\b)/i,/^(?:outStr\b)/i,/^(?:outNum\b)/i,/^(?:inStr\b)/i,/^(?:inNum\b)/i,/^(?:show\b)/i,/^(?:getRandom\b)/i,/^(?:getLength\b)/i,/^(?:throws\b)/i,/^(?:NullPointerException\b)/i,/^(?:MissingReturnStatement\b)/i,/^(?:ArithmeticException\b)/i,/^(?:StackOverFlowException\b)/i,/^(?:HeapOverFlowException\b)/i,/^(?:PoolOverFlowException\b)/i,/^(?:\*)/i,/^(?:\.\.)/i,/^(?:\/)/i,/^(?:=)/i,/^(?:-)/i,/^(?:\+)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:<)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:!)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:\|&)/i,/^(?:&\?)/i,/^(?:\|\?)/i,/^(?:\.)/i,/^(?:,)/i,/^(?::)/i,/^(?:;)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:PI\b)/i,/^(?:E\b)/i,/^(?:[a-zA-Z]([a-zA-Z]|[0-9]|_)*)/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:("|')([^\'"']|\\.)*("|'))/i,/^(?:\(\.\)\?)/i,/^(?:$)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args){if(!args[1]){console.log("Usage: "+args[0]+" FILE");process.exit(1)}var source=require("fs").readFileSync(require("path").normalize(args[1]),"utf8");return exports.parser.parse(source)};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}